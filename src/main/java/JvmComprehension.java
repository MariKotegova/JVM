//  Код с помощью компилятора превращается в байт код, далее этот байт код загружается в JVM
//  и далее уже может быть прочитан на любой ОС, так как JVM адаптирован для каждой ОС, этим
//  и обеспечивается кросплатформенность языка java, но за счет этого и снижается скорость работы

//  в JVM сначала включается система загрузчиков классов ClassLoader, классы загружаются по мере
//  исполнения программы, у него есть несколько уровней сначала данные попадают в Aplication ClassLoader
//  он передает их в Platform ClassLoader и он передает Bootstrap ClassLoader. Загрузка происходит в обратном
//  порядке Bootstrap ClassLoader загружает то что может загрузить (классы из ядра джава), остальное
//  передает ниже, Platform ClassLoader загружает классы из java.util остальное передает ниже Aplication ClassLoader
//  он в свою очередь загружает уже мой класс class JvmComprehension(если будет какая то проблема то он
//  выдаст ошибку что класс не загружен)
//
//  Далее идет связывание полученных класов, происходит Verify(проверяют что класс валиден), Prepare(подготовка)
//  и Resolve(связывание ссылок на другие классы) и после этого происходит уже инициализация, тоесть программу
//  можно уже использовать для работы
//


public class JvmComprehension {
    //  Далее мой класс JvmComprehension со всем своим содержимым попадает в область памяти Metaspace.
    public static void main(String[] args) {

        //  В стеке создается фрейм  main
        int i = 1;                      //1) в стеке в фрейме main() создается примитивная переменная i
        Object o = new Object();        //2) в куче создается обьект new Object() и далее ссылка на него
                                        // создается в стеке в переменной о.
        Integer ii = 2;                 //3) в куче создается переменная типа Integer со значением 2
                                        // далее ссылка на нее передается в стек в переменную ii
        printAll(o, i, ii);             //4) В стеке создается новый фрейм printAll()
                                        // в нем создается переменная о куда записывается ссылка из кучи
                                        // на new Object()
                                        // перменная int i  куда передается значение i
                                        // и переменная ii куда передается ссылка на Integer со значением 2 из кучи
        System.out.println("finished"); //7) В стеке создается новый фрейм println()
                                        // В куче создается ссылочная переменная типа стринг с текстом "finished"
                                        // после чего ссылка на нее попадает в стек в фрейм println()
                                        // в статическое поле out после чего выполняется команда вывода текста на экран
                                        // и далее из стека удаляется фрейм println()
                                        // Далее из стека удаляется последний фрейм main
                                        // Программа завершена.
    }

    private static void printAll(Object o, int i, Integer ii) {
        Integer uselessVar = 700;                   //5) в куче создается переменная типа Integer со значением 700
                                                    // далее ссылка на нее передается в стек в переменную uselessVar
        System.out.println(o.toString() + i + ii);  //6) В стеке создается новый фрейм println()
                                                    // У объекта о, вызывается метод toString(), соответственно в
                                                    // стеке создается новый фрейм toString(), куда из кучи передается
                                                    // ссылка на объект new Object(), полученное значение возвращается
                                                    // результатом от o.toString() и фрейм toString() удаляется из стека
                                                    // к полученному результату прибавляются данные i + ii
                                                    // после чего в куче создается объект класса стринг с полученными
                                                    // текстом. ссылка на нее попадает в стек в фрейм println()
                                                    // в статическое поле out после чего выполняется команда вывода
                                                    // текста на экран
                                                    // и далее из стека удаляется фрейм println()
    }
}
// В любой произвольный период времени запускается сборщик мусора который проверяет есть ли в куче какие то данные
// которые не используются или которые больше не будут использоваться и удаляет такие данные, при чем на время
// работы сборщика мусора программа останавливается. По этому java работает медленнее чем некоторые другие языки
// программирования
// Соответственно чем меньше пользоваться кучей тем быстрее будет работать программа.